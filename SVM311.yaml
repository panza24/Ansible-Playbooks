# file: plays/openshift-utils/svm311.yaml
---
- name: Node labels
  hosts: "ose_master__active:&master01*:!master01.ocp.ccc.srvb.cn1*"
  gather_facts: no
  become: true
  vars:
    svm_list: []
    old_masterssvm: ['ocp.ccc.srvb.cn1,netapp-iscsi,SVM_ISCSI','ocp.ccc.srvb.cn1,netapp-nfs,SVM_NFS','ocp.ccc.srvb.cn1,multipath,SVMGPAASSS01']
    path_svmlist: /tmp/svm4x/svm_list.csv 
    trident__folder: /opt/trident/trident-installer/

  pre_tasks:
    - name: "Initialize"
      import_tasks: ../tasks/load-context.yaml
      vars:
        use_vault: false
      tags: [always]

    - name: "{{ __task_prfx }}Select OCP target platform"
      set_fact:
        is_ocp4: "{{ 'platform_ocp4' in group_names }}"
      tags: [always]

    - name: "{{ __task_prfx }}Set facts (4.x)"
      set_fact:
        oc_version__client_prefix: 'openshift-clients-'
        oc_version__server_prefix: ''
      when: is_ocp4
      tags: [always] 

    - name: "{{ __task_prfx }}Check kubeconfig (3.x)"
      import_role:
        name: gpaas_commons
      when: not is_ocp4

    - name: Clean temporary file svm_list.csv
      local_action: shell cat /dev/null  > {{ path_svmlist }}
      become: false

#    - name: "{{ __task_prfx }}Get namesapce"
#      shell: oc get pods --all-namespaces|grep trident|awk '{print $1}'|sort -u
#      register: is_c3
#    - debug:
#        var: is_c3
#
#    - name: "{{ __task_prfx }}Set facts namespace c3-trident"
#      set_fact:
#        trident__project: c3-trident
#      when: is_c3.stdout == "c3-trident"
#        
#    - name: "{{ __task_prfx }}Set facts namespace globalpaas-pro"
#      set_fact:
#        trident__project: globalpaas-pro
#      when: is_c3.stdout == "globalpaas-pro"
 
  tasks:
    - name: "Select cluster operator"
      run_once: true
      set_fact:
        operator_vm: "{{ groups['operator__active'][0] }}"

    - name: "Check if trident binary is already installed and configured"
      shell: ./tridentctl -n {{ trident__project }} version
      args:
        chdir: "{{ trident__folder }}"
      register: trident_version

    - debug:
        var: trident_version.stdout

    - name: "SVM according to backend type and hostname"
      shell: >- 
        executable=/bin/bash
        set -o pipefail && \
        ./tridentctl get backend -n {{ trident__project }} -o yaml|grep -e "backendName:" -e "svm:"|grep -Po '^[^:]+: \K(.*)'
      args:
        chdir: "{{ trident__folder }}"
      register: svm_nfs

    - debug:
        var: svm_nfs

    - set_fact:
        svm_list: '{{ svm_list + [ gpaas_cluster + "," + svm_nfs.stdout_lines[item|int] + "," + svm_nfs.stdout_lines[item|int +1] ] }}' 
      with_sequence: start=0 end={{ svm_nfs.stdout_lines|length - 1}} stride=2
    - debug:
        var: svm_list 

    - name: "imprime svm_list"
      local_action: shell echo -e '{{ svm_list|join("\n") }}' >> {{ path_svmlist }}
      become: false

    - name: "imprime svm_list master01 muy antiguos siempre que se ejecute el playbook desde CAN"
      local_action: shell echo -e '{{ old_masterssvm|join("\n") }}' >> {{ path_svmlist }}
      become: false
      when: "inventory_hostname == 'master01.gsc01.gsc.dmzb.cn1.paas.cloudcenter.corp'"
